import { EventId, SuiClient, SuiEvent } from "@mysten/sui.js/client";
/**
 * A tool to fetch the latest Sui events and parse them into custom objects.
 * @see SuiEventFetcher.fetchEvents
 */
export declare class SuiEventFetcher<T> {
    private eventType;
    private parseEvent;
    private eventCursor;
    private suiClient;
    private rateLimitDelay;
    /**
     * @param eventType     The full Sui event object type, e.g. '0x123::your_module::YourEvent'.
     * @param parseEvent    A function that can parse raw Sui events into custom objects.
     * @param nextCursor    (optional) To start fetching events starting at an old cursor.
     * @param networkName   (optional) The network name. Defaults to 'mainnet'.
     */
    constructor(suiClient: SuiClient, eventType: string, parseEvent: (suiEvent: SuiEvent) => T | null, nextCursor?: EventId | null);
    /**
     * Fetch the latest events. Every time the function is called it looks
     * for events that took place since the last call.
     */
    fetchEvents(): Promise<T[]>;
    private fetchLastEventAndUpdateCursor;
    private fetchEventsFromCursor;
}
