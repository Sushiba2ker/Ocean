/**
 * Split an array into multiple chunks of a certain size.
 */
export declare function chunkArray<T>(array: T[], chunkSize: number): T[][];
/**
 * Convert a number to a bigint, scaled to the specified decimals.
 */
export declare function convertNumberToBigInt(num: number, decimals: number): bigint;
/**
 * Convert a bigint to a number, scaled down to the specified decimals.
 */
export declare function convertBigIntToNumber(big: bigint, decimals: number): number;
/**
 * Format a bigint into a readable string, scaled down to the specified decimals.
 * @see formatNumber
 */
export declare function formatBigInt(big: bigint, decimals: number, format?: "standard" | "compact"): string;
/**
 * Format a number into a readable string.
 *
 * - 'standard' format:
 *   - If the number is < 1000, show 2 decimals (e.g. '123.45')
 *   - If the number is >= 1000, don't show any decimals (e.g. '1,234')
 *
 * - 'compact' format:
 *   - If the number is < 1 million, use 'standard' format
 *   - If the number is >= 1 million, use word notation (e.g. '540.23M', '20.05B')
 */
export declare function formatNumber(num: number, format?: "standard" | "compact"): string;
/**
 * Log a message including the current date and time.
 */
export declare function log(level: "log" | "info" | "debug" | "warn" | "error", ...data: unknown[]): void;
/**
 * Generate an array of ranges of a certain size between two numbers.
 *
 * For example, calling `makeRanges(0, 678, 250)` will return:
 * ```
 * [ [ 0, 250 ], [ 250, 500 ], [ 500, 678 ] ]
 * ```
 */
export declare function makeRanges(from: number, to: number, size: number): number[][];
/**
 * Wait for a number of milliseconds.
 */
export declare function sleep(ms: number): Promise<void>;
