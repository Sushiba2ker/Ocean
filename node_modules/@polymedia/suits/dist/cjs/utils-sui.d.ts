import { DynamicFieldInfo, SuiClient, SuiExecutionResult, SuiObjectResponse } from "@mysten/sui.js/client";
import { TransactionBlock, TransactionResult } from "@mysten/sui.js/transactions";
import { SuiExplorerItem } from "./types.js";
/**
 * Call `SuiClient.devInspectTransactionBlock()` and return the results.
 */
export declare function devInspectAndGetResults(suiClient: SuiClient, txb: TransactionBlock, sender?: string): Promise<SuiExecutionResult[]>;
/**
 * Call `SuiClient.devInspectTransactionBlock()` and return the deserialized return values.
 * @returns An array with the deserialized return values of each transaction in the TransactionBlock.
 */
export declare function devInspectAndGetReturnValues(suiClient: SuiClient, txb: TransactionBlock, sender?: string): Promise<unknown[][]>;
/**
 * Get all dynamic object fields owned by an object.
 */
export declare function fetchAllDynamicFields(suiClient: SuiClient, parentId: string, sleepBetweenRequests?: number, // milliseconds
verbose?: boolean): Promise<DynamicFieldInfo[]>;
/**
 * Generate a random Sui address (for development only).
 */
export declare function generateRandomAddress(): string;
/**
 * Get a `Coin<T>` of a given value from the owner. Handles coin merging and splitting.
 * Assumes that the owner has enough balance.
 */
export declare function getCoinOfValue(suiClient: SuiClient, txb: TransactionBlock, ownerAddress: string, coinType: string, coinValue: number | bigint): Promise<TransactionResult>;
/**
 * Validate a SuiObjectResponse and return its content.
 * @param resp A `SuiObjectResponse` from `SuiClient.getObject()` / `.multiGetObjects()` / `.getDynamicFieldObject()`
 * @param typeRegex (optional) A regular expression to check that `resp.data.content.type` has the right type
 * @returns The contents of `resp.data.content.fields`
 */
export declare function getSuiObjectResponseFields(resp: SuiObjectResponse, typeRegex?: string): Record<string, any>;
/**
 * Build a Polymedia Explorer URL, like 'https://explorer.polymedia.app/address/0x123...456?network=testnet'
 */
export declare function makeExplorerUrl(network: string, kind: SuiExplorerItem, address: string): string;
/**
 * Remove leading zeros from a Sui address (lossless). For example it will turn
 * '0x0000000000000000000000000000000000000000000000000000000000000002' into '0x2'.
 */
export declare function removeLeadingZeros(address: string): string;
/**
 * Get SUI from the faucet on localnet/devnet/testnet.
 */
export declare function requestSuiFromFaucet(network: "localnet" | "devnet" | "testnet", address: string): Promise<Response>;
/**
 * Abbreviate a Sui address for display purposes (lossy). Default format is '0x1234â€¦5678',
 * given an address like '0x1234000000000000000000000000000000000000000000000000000000005678'.
 */
export declare function shortenSuiAddress(text: string | null | undefined, start?: number, end?: number, separator?: string, prefix?: string): string;
/**
 * Validate a Sui address and return its normalized form, or `null` if invalid.
 */
export declare function validateAndNormalizeSuiAddress(address: string): string | null;
